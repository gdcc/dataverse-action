name: dataverse-action
description:
  Deploy customizable Dataverse services in Docker and test your integrations and features within CI. Choose your flavors!
author: Oliver Bertuch, Jan Range and friends
branding:
  icon: box
  color: orange

inputs:
  image_tag:
    description: "Tag of image for Dataverse app and Configbaker"
    required: true
    default: "unstable"
  image_dataverse:
    description: "Name of Dataverse app image (can include registry)"
    required: true
    default: "docker.io/gdcc/dataverse"
  image_configbaker:
    description: "Name of Configbaker image (can include registry)"
    required: true
    default: "docker.io/gdcc/configbaker"
  postgresql_version:
    description: "Override the PostgreSQL version to use"
    required: false
  solr_version:
    description: "Override the Solr version to use"
    required: false
  jvm_options:
    description: "Line separated key-value pairs of JVM options to be set before startup. Example: dataverse.spi.exporters.directory=/..."
    required: false
  flavor:
    description: "Path to a directory containing your flavored configuration"
    required: false
outputs:
  api_token:
    description: "API Token of dataverseAdmin superuser"
    value: ${{ steps.bootstrap.outputs.API_TOKEN }}
  base_url:
    description: "Base URL where to reach the instance via HTTP"
    value: ${{ steps.bootstrap.outputs.base_url }}
  dv_version:
    description: "Dataverse version"
    value: ${{ steps.bootstrap.outputs.dv_version }}
runs:
  using: "composite"
  steps:
    - name: "Pull images for inspection and cache"
      shell: bash
      run: |
        docker pull -q ${{ inputs.image_dataverse }}:${{ inputs.image_tag }}
        docker pull -q ${{ inputs.image_configbaker }}:${{ inputs.image_tag }}
    - name: "Prepare environment variables, push them to GITHUB_ENV file"
      shell: bash
      working-directory: ${{ github.action_path }}/scripts
      run: |
        ./prepare.sh \
          -p "${{ inputs.postgresql_version }}" -s "${{ inputs.solr_version }}" \
          -d "${{ inputs.image_dataverse }}" -c "${{ inputs.image_configbaker }}" -t "${{ inputs.image_tag }}" \
          -o dv/conf
        
        # We use the MicroProfile Config Source trick of reading properties from a directory.
        # See also https://docs.payara.fish/community/docs/Technical%20Documentation/MicroProfile/Config/Directory.html
        mkdir -p "${RUNNER_TEMP}/dv/conf"
        while IFS= read -r line; do
          FILENAME="${RUNNER_TEMP}/dv/conf/$(echo "$line" | cut -f1 -d=)"
          echo "$line" | cut -f2- -d= > "$FILENAME"
        done < <(printf '%s' "${{ inputs.jvm_options }}")
    - name: "Start Dataverse service in background"
      shell: bash
      working-directory: ${{ github.action_path }}/scripts
      run: |
        ./service.sh up -d -p apitest -f "${{ inputs.flavor }}"
    # Bootstrap will wait up until accessible, so blocking here.
    - name: "Bootstrap Dataverse service"
      id: bootstrap
      shell: bash
      run: |
        echo "::group::ðŸ¤– Bootstrap Dataverse service"
        mkdir -p "${RUNNER_TEMP}/dv"
        touch "${RUNNER_TEMP}/dv/bootstrap.exposed.env"
        
        docker run -i --network apitest_dataverse \
          -v "${RUNNER_TEMP}/dv/bootstrap.exposed.env:/.env" \
          "${CONFIGBAKER_IMAGE}" bootstrap.sh -e /.env dev
        
        # Expose outputs
        grep "API_TOKEN" "${RUNNER_TEMP}/dv/bootstrap.exposed.env" >> "$GITHUB_OUTPUT"
        echo "base_url=http://localhost:8080/" >> "$GITHUB_OUTPUT"
        
        # Expose version
        version=$(curl -s 'http://localhost:8080/api/info/version' | jq -r '.data.version')
        echo "dv_version=$version" >>"$GITHUB_OUTPUT"
        
        echo "::endgroup::"
